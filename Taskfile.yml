version: '3'

vars:
  ext: '{{if eq OS "windows"}}.exe{{end}}'
  test_binaries: |
    test/sleep

env:
  CGO_ENABLED: 0

tasks:
  default:
    deps:
      - all

  all:
    desc: 'Build and test everything'
    deps:
      - build
      - test

  build:
    desc: 'Build all components'
    deps:
      - build_binaries

  build_binaries:
    desc: 'Build all necessary binaries'
    deps:
      - build_memsparkline
      - build_test_binaries

  build_binary:
    desc: 'Build a single Go binary'
    internal: true
    cmds:
      - go build -o {{.out | shellQuote}}{{.ext}} {{.src | shellQuote}}

  build_memsparkline:
    desc: 'Build the memsparkline binary'
    cmds:
      - task: build_binary
        vars:
          out: memsparkline
          src: main.go
    sources:
      - main.go
    generates:
      - memsparkline{{.ext}}

  build_test_binaries:
    desc: 'Build the test binaries'
    cmds:
      - task: build_binary
        vars:
          src: '{{.test_binary}}.go'
          out: '{{.test_binary}}'
        for:
          var: test_binaries
          as: test_binary
    sources:
      - test/sleep.go
    generates:
      - test/sleep{{.ext}}

  clean:
    desc: 'Clean up binaries'
    cmds:
      - rm -f memsparkline{{.ext}}
      - cmd: rm -f {{.test_binary | shellQuote}}{{.ext}}
        for:
          var: test_binaries
          as: test_binary

  release:
    desc: 'Prepare a release'
    deps:
      - build_binaries
    cmds:
      - VERSION=$(./memsparkline{{.ext}} --version) go run script/release.go

  test:
    desc: 'Run tests'
    deps:
      - build_binaries
    cmds:
      - go test
