#! /usr/bin/env python3

# Copyright (c) 2020 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import os.path
import psutil
import sys
import time

SPARKLINE_LENGTH = 20
SPARKLINE_TICKS = ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█']
USAGE_DIVISOR = 1 << 20


def sparkline(min, max, data):
    tick_max = len(SPARKLINE_TICKS) - 1

    if min == max:
        return SPARKLINE_TICKS[tick_max // 2] * len(data)

    return ''.join(
        SPARKLINE_TICKS[int(tick_max * (x - min) / (max - min))]
        for x in data
    )


def track(parent, output, newlines):
    history = []
    maximum = 0

    while parent.is_running() and parent.status() != psutil.STATUS_ZOMBIE:
        tree = parent.children(recursive=True)
        tree.append(parent)

        rsss = [x.memory_info().rss for x in tree]
        total = sum(rsss)

        history.append(total)

        time.sleep(1)

        maximum = max(maximum, total)

        latest = history[-SPARKLINE_LENGTH:]
        line = sparkline(0, maximum, latest)
        fmt = '%s %0.2f\n' if newlines else '\r%s %0.2f'
        print(
            fmt % (line, total / USAGE_DIVISOR),
            end='',
            file=output,
        )

    return (maximum, history)


def usage(argv0):
    print(
        'usage: %s command [arg... ]' % os.path.basename(argv0),
        file=sys.stderr,
    )


def cli(argv):
    parser = argparse.ArgumentParser(
        description='Display memory usage in real time'
    )
    parser.add_argument(
        'command',
        default=[],
        help='the command to run and its arguments',
        metavar='arg',
        nargs='+',
    )
    parser.add_argument(
        '-o', '--output',
        default='',
        dest='output',
        help='output file (leave empty for the standard error)',
        metavar='output',
    )
    parser.add_argument(
        '-n', '--newlines',
        action='store_true',
        default=False,
        help='print the sparkline on a new line every time',
    )

    args = parser.parse_args(argv[1:])

    return args


def main(argv):
    args = cli(argv)

    output = sys.stderr
    if args.output != '':
        output = open(args.output, 'w', 1)

    p = psutil.Popen(args.command)
    maximum, history = track(p, output, args.newlines)
    p.wait()

    if history == []:
        print('no data collected', file=output)
        return

    if not args.newlines:
        print('', file=output)

    print('max: %0.2f' % (maximum / USAGE_DIVISOR), file=output)
    print(
        'avg: %0.2f' % (sum(history) / len(history) / USAGE_DIVISOR),
        file=output,
    )

    output.close()


if __name__ == '__main__':
    main(sys.argv)
