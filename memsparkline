#! /usr/bin/env python3

# Copyright (c) 2020 D. Bohdan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import contextlib
import sys
import time

import psutil

SPARKLINE_TICKS = ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█']
USAGE_DIVISOR = 1 << 20


def main(argv):
    args = cli(argv)

    with open_output(args.output_path) as output:
        process = psutil.Popen([args.command] + args.arguments)
        maximum, history = track(
            process,
            output,
            newlines=args.newlines,
            sparkline_length=args.length,
        )
        process.wait()

        if history == []:
            print('no data collected', file=output)
            return

        if not args.newlines:
            print('', file=output)

        print(
            'avg: %0.2f' % (sum(history) / len(history) / USAGE_DIVISOR),
            file=output,
        )
        print(
            'max: %0.2f' % (maximum / USAGE_DIVISOR),
            file=output,
        )


def cli(argv):
    parser = argparse.ArgumentParser(
        description='Track the RAM usage (resident set size) of a process and '
        'its descendants in real time.'
    )
    parser.add_argument(
        'command',
        default=[],
        help='command to run',
    )
    parser.add_argument(
        'arguments',
        default=[],
        help='arguments to the command',
        metavar='arg',
        nargs='*',
    )
    parser.add_argument(
        '-l', '--length',
        default=60,
        dest='length',
        help='sparkline length',
        metavar='n',
        type=int,
    )
    parser.add_argument(
        '-n', '--newlines',
        action='store_true',
        default=False,
        help='print the sparkline on a new line every time',
    )
    parser.add_argument(
        '-o', '--output',
        default='',
        dest='output_path',
        help='output file (leave empty for the standard error)',
        metavar='path',
    )

    args = parser.parse_args(argv[1:])

    return args


@contextlib.contextmanager
def open_output(path):
    handle = sys.stderr
    if path != '':
        handle = open(path, 'w', 1)

    try:
        yield handle
    finally:
        if handle is not sys.stderr:
            handle.close()


def track(parent, output, newlines=False, sparkline_length=20):
    history = []
    maximum = 0

    while parent.is_running() and parent.status() != psutil.STATUS_ZOMBIE:
        tree = parent.children(recursive=True)
        tree.append(parent)

        total = sum(x.memory_info().rss for x in tree)
        maximum = max(maximum, total)
        history.append(total)

        latest = history[-sparkline_length:]
        line = sparkline(0, maximum, latest)
        fmt = '%s %0.2f\n' if newlines else '\r%s %0.2f'
        print(
            fmt % (line, total / USAGE_DIVISOR),
            end='',
            file=output,
        )

        time.sleep(1)

    return (maximum, history)


def sparkline(minimum, maximum, data):
    tick_max = len(SPARKLINE_TICKS) - 1

    if minimum == maximum:
        return SPARKLINE_TICKS[tick_max // 2] * len(data)

    return ''.join(
        SPARKLINE_TICKS[
            int(tick_max * (x - minimum) / (maximum - minimum))
        ]
        for x in data
    )


if __name__ == '__main__':
    main(sys.argv)
