#! /usr/bin/env python3
# Copyright (c) 2020 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import psutil
import sys
import time

SPARKLINE_LENGTH = 20
TICKS = ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█']
TICK_MAX = len(TICKS) - 1


def sparkline(min, max, data):
    return ''.join(
        TICKS[int(TICK_MAX * (x - min) / (max - min))]
        for x in data
    )


def track(parent):
    history = []
    maximum = 0

    while parent.is_running() and parent.status() != psutil.STATUS_ZOMBIE:
        tree = parent.children(recursive=True)
        tree.append(parent)

        rsss = [x.memory_info().rss for x in tree]
        total = sum(rsss)

        history.append(total)

        time.sleep(1)

        maximum = max(maximum, total)

        latest = history[-SPARKLINE_LENGTH:]
        line = sparkline(0, maximum, latest)
        print(
            '\r%s %0.2f' % (line, total / (1 << 20)),
            file=sys.stderr,
            end=''
        )

    return (maximum, history)


def main(args):
    p = psutil.Popen(args)
    maximum, history = track(p)
    p.wait()

    if len(history) == 0:
        print('no data collected', file=sys.stderr)
        return

    print('', file=sys.stderr)
    print('max: %0.2f' % (maximum / (1 << 20)), file=sys.stderr)
    print(
        'avg: %0.2f' % (sum(history) / len(history) / (1 << 20)),
        file=sys.stderr
    )


if __name__ == '__main__':
    main(sys.argv[1:])
