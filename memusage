#! /usr/bin/env python3
# Copyright (c) 2020 D. Bohdan
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import psutil
import sys
import time

SPARKLINE_LENGTH = 20
TICKS = ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█']
TICK_MAX = len(TICKS) - 1


def sparkline(min, max, data):
    if min == max:
        return TICKS[TICK_MAX // 2] * len(data)
    else:
        return ''.join(
            [TICKS[int(TICK_MAX * (x - min) / (max - min))] for x in data]
        )


def track(parent):
    history = []
    maximum = 0

    while parent.is_running() and parent.status() != psutil.STATUS_ZOMBIE:
        tree = parent.children(recursive=True)
        tree.append(parent)

        rsss = [x.memory_info().rss for x in tree]
        total = sum(rsss)

        history.append(total)

        time.sleep(1)

        maximum = max(maximum, total)

        latest = history[-SPARKLINE_LENGTH:]
        line = sparkline(0, maximum, latest)
        print(
            '\r%s %0.2f' % (line, total / (1 << 20)),
            file=sys.stderr,
            end=''
        )

    return (maximum, history)


def main(args):
    p = psutil.Popen(args)
    max, history = track(p)
    p.wait()

    if len(history) == 0:
        print('no data collection', file=sys.stderr)
        return

    print('', file=sys.stderr)
    print('max: %0.2f' % (max / (1 << 20)), file=sys.stderr)
    print(
        'avg: %0.2f' % (sum(history) / len(history) / (1 << 20)),
        file=sys.stderr
    )


if __name__ == '__main__':
    main(sys.argv[1:])
